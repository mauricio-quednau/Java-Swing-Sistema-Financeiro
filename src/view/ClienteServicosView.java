/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import DAO.ClienteServicoDAO;
import DAO.ServicoDAO;
import classes.InputMask;
import classes.Cliente;
import classes.ClienteServico;
import classes.Servico;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mauricio
 */
public class ClienteServicosView extends javax.swing.JInternalFrame {

    /**
     * Creates new form ClienteServicosView
     */
    
    JDesktopPane parent;
    private Cliente cliente;
    private ArrayList<Servico> servicos; //para combobox...
    private ArrayList<Servico> servicosDoCliente;
    private ArrayList<ClienteServico> clienteServicos;
    
    public ClienteServicosView(JDesktopPane parent, Cliente c) {
        initComponents();
        this.parent = parent;
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setClosable(true);
        setTamanhoColunasTabela();
        
        //Preencher dados do cliente
        this.cliente = c;
        jtfNomeCliente.setText(c.getNomeRSocial());
        jtfIdCliente.setText(String.valueOf(c.getId()));
        
        //Preencher lista de todos os servicos para exibir na combo
        ServicoDAO serDao = new ServicoDAO();
        this.servicos = (ArrayList) serDao.list();
        preencherComboServicos(servicos);
        
        //Preencher lista de clienteServicos, conforme ID do cliente
        ClienteServicoDAO csDao = new ClienteServicoDAO();
        this.clienteServicos = (ArrayList)csDao.consultar(c.getId());
        
        this.servicosDoCliente = filtrarServicosCliente();
        preencherTabelaClienteServico();
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtfNomeCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfIdCliente = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jcbFinalizado = new javax.swing.JCheckBox();
        jbSalvar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jtfValor = new javax.swing.JTextField();
        jtfIdServicoCliente = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jcbServicos = new javax.swing.JComboBox();
        jbAddServico = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Serviços por Cliente");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Serviços do Cliente");

        jLabel2.setText("Cliente:");

        jtfNomeCliente.setEditable(false);

        jLabel3.setText("ID:");

        jtfIdCliente.setEditable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Serviço", "Valor", "Vencimento", "Data Início", "Data Fim", "Ativo"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jcbFinalizado.setText("Finalizado");

        jbSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/save.png"))); // NOI18N
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/trash.png"))); // NOI18N
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jLabel4.setText("Alterar Valor: R$");

        jtfIdServicoCliente.setEditable(false);

        jLabel5.setText("ID Seleção:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfIdServicoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfValor, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jcbFinalizado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel1))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(47, 47, 47)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtfNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(68, 68, 68)
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtfIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jtfIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbSalvar)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jtfIdServicoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcbFinalizado)
                        .addComponent(jLabel4)
                        .addComponent(jtfValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jbExcluir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Adicionar Serviço ao Cliente:");

        jbAddServico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        jbAddServico.setText("Adicionar");
        jbAddServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddServicoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jcbServicos, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbAddServico)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbServicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAddServico))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private ArrayList<Servico> filtrarServicosCliente(){
        ArrayList<Servico> sers = new ArrayList();
        for(int i = 0; i < clienteServicos.size(); i++){
            if(clienteServicos.get(i).getIdCliente() == cliente.getId()){
                for(Servico s : servicos){
                    if(clienteServicos.get(i).getIdServico() == s.getId()){
                        sers.add(s);
                    }
                }
            }
        }
        return sers;
    }
    

    
    private void setTamanhoColunasTabela(){
        jTable1.getColumnModel().getColumn(0).setMaxWidth(35);//ID
        jTable1.getColumnModel().getColumn(1).setMaxWidth(200);//servico
        jTable1.getColumnModel().getColumn(2).setMaxWidth(100);//valor
        jTable1.getColumnModel().getColumn(3).setMaxWidth(100);//vencimento
        jTable1.getColumnModel().getColumn(4).setMaxWidth(100);//dt inicio
        jTable1.getColumnModel().getColumn(5).setMaxWidth(100);//dt fim
        jTable1.getColumnModel().getColumn(6).setMaxWidth(40);//ativo
    }
    
    private void preencherTabelaClienteServico(){
        if(servicos == null || servicos.size() <= 0 || servicosDoCliente == null || servicosDoCliente.size() <= 0)
            return;
        
        
        
        DefaultTableModel modeloTb = (DefaultTableModel)jTable1.getModel();
        modeloTb.setNumRows(0);
        
        for(Servico s : this.servicos){
            int idServico = s.getId();
            String nomeServico = s.getNome();
            for(ClienteServico cs : this.clienteServicos){
                if(idServico == cs.getIdServico()){
                    String dtFim = cs.getDataFimFromSql();
                    if(dtFim.equalsIgnoreCase("NULL"))//tratamento para nao inserir palavra NULL na tela
                        dtFim = "";
                    modeloTb.addRow(new Object[]{idServico, nomeServico, ("R$ "+cs.getValor()), cs.getDataVencimentoFromSql(), cs.getDataInicioFromSql(), dtFim, (cs.isAtivo()?"SIM":"NÃO")});
                }
            }
            
        }
    }
    /*private void preencherTabelaClienteServico(){
        ModeloTabela m = new ModeloTabela(clienteServicos, servicos);
        jTable1.setModel(m);
        for(ClienteServico cs : clienteServicos){
            String nomeServico = "";
            for(Servico s : servicos){
                if(s.getId() == cs.getIdServico())
                    nomeServico = s.getNome();
            }
            JRadioButton rd = new JRadioButton();
            rd.setForeground(Color.red);
            rd.setBackground(Color.red);
                    
            m.addRow(cs);
        }
        
        
        DefaultTableModel modeloTb = (DefaultTableModel)jTable1.getModel();
        modeloTb.setNumRows(0);
        for(ClienteServico cs : clienteServicos){
            String nomeServico = "";
            for(Servico s : servicos){
                if(s.getId() == cs.getIdServico())
                    nomeServico = s.getNome();
            }
            JRadioButton rd = new JRadioButton();
            rd.setForeground(Color.red);
            rd.setBackground(Color.red);
                    
            modeloTb.addRow(new Object[]{cs.getIdServico(), nomeServico, cs.getValorMensal(), cs.getPeriodoFaturamento(), cs.getDataInicio(), cs.getDataFim(), rd});
        }
        
    }*/
    
    
    private void preencherComboServicos(ArrayList<Servico> servicos){
        for(Servico s : servicos){
            String serv = String.format("%-40s %s", s.getNome(), "");
            String servico = s.getId() + "- " + serv +" - "+s.getDescricao();
            jcbServicos.addItem(servico);
        }
    }
    
    private void preencherCamposClienteServico(int IdServico, Float valor, boolean ativo){
        limpaCampos();
        jtfIdServicoCliente.setText(String.valueOf(IdServico));
        jtfValor.setText(String.valueOf(valor));
        if(!ativo)
            jcbFinalizado.setSelected(!ativo);
    }
    
    private void limpaCampos(){
        jtfIdServicoCliente.setText("");
        jtfValor.setText("");
        jcbFinalizado.setSelected(false);
    }
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //pegar linha selecionada da tabela
        //pegar o id do servico da linha selecionada
        //obter o clienteServico conforme o id_servico e id_cliente
        //preencher campos
        int linhaSelecionada = jTable1.getSelectedRow();
        if(linhaSelecionada >= 0){
            int idServico = getIdServicoLinhaTabela(linhaSelecionada);
            
            ClienteServico cs = null;
            for(int i = 0; i < clienteServicos.size(); i++){
                if(clienteServicos.get(i).getIdCliente() == cliente.getId() && clienteServicos.get(i).getIdServico() == idServico){
                    cs = clienteServicos.get(i);
                }
            }
            if(cs != null){
                preencherCamposClienteServico(cs.getIdServico(), cs.getValor(), cs.isAtivo());
            }
            
        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void jbAddServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddServicoActionPerformed
        //Pegar o ID do serviço para associar com o cliente
        String servico = (String)jcbServicos.getSelectedItem();
        String[] str = servico.split("- ");
        String idServico = str[0];
        int idServ = Integer.parseInt(idServico);
        
        //verificar se já não existe esssa associação
        for(ClienteServico cs : clienteServicos){
            if(idServ == cs.getIdServico()){
                int ret = JOptionPane.showConfirmDialog(this, "Serviço já associado! Continuar?");
                if(ret == 1 || ret == 2)//opções 'nao' e 'cancela '
                    return;
            }
        }
        
        //Questionar dados para criar a associação ClienteServico
        Float valor = Float.parseFloat(JOptionPane.showInputDialog(this, "R$ ", "0"));
        
        //Questionar data inicial (oferecendo atual)
        String dataIni = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
        dataIni = JOptionPane.showInputDialog(this, "Data Inicial: ", dataIni);
                
        int dia = Integer.parseInt(dataIni.substring(0, 2));
        int mes = Integer.parseInt(dataIni.substring(3, 5));
        int ano = Integer.parseInt(dataIni.substring(6));
        String vMensal = "";
        if(mes + 1 > 12){//mensal
            int m = (mes+1)-12; //01
            int a = ano+1;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vMensal = m < 10 ? d+"/0"+m+"/"+a : d+"/"+m+"/"+a;
        }else{
            int m = mes+1;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vMensal = m < 10 ? d+"/0"+m+"/"+ano : d+"/"+m+"/"+ano;
        }
        String vTrimestral = "";
        if(mes + 3 > 12){//trimestre
            int m  = (mes+3)-12; //01
            int a = ano+1;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vTrimestral = m < 10 ? d+"/0"+m+"/"+a : d+"/"+m+"/"+a;
        }else{
            int m = mes+3;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vTrimestral = m < 10 ? d+"/0"+m+"/"+ano : d+"/"+m+"/"+ano;
        }
        String vSemestral = "";
        if(mes + 6 > 12){//semestre
            int m = (mes+6)-12; //01
            int a = ano+1;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vSemestral = m < 10 ? d+"/0"+m+"/"+a : d+"/"+m+"/"+a;
        }else{
            int m = mes+6;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vSemestral = m < 10 ? d+"/0"+m+"/"+ano : d+"/"+m+"/"+ano;
        }
        String vAnual = "";
        if(mes + 12 > 12){//ano
            int m = (mes+12)-12; //01
            int a = ano+1;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vAnual = m < 10 ? d+"/0"+m+"/"+a : d+"/"+m+"/"+a;
        }
        
        
        Object[] options = {"MENSAL: [ "+vMensal+" ]", "TRIMESTRAL: [ "+vTrimestral+" ]", "SEMESTRAL: [ "+vSemestral+" ]", "ANUAL: [ "+vAnual+" ]"};
        int opt = JOptionPane.showOptionDialog(this, "Data próximo VENCIMENTO:", "Vencimento", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, "");
        if(opt == 0){
            ClienteServico cliSer = new ClienteServico(cliente.getId(), idServ, dataIni, "", vMensal, valor, true, (byte)1);
            new ClienteServicoDAO().insert(cliSer);
        }            
        else if(opt == 1){
            ClienteServico cliSer = new ClienteServico(cliente.getId(), idServ, dataIni, "", vTrimestral, valor, true, (byte)3);
            new ClienteServicoDAO().insert(cliSer);   
        }
        else if(opt == 2){
            ClienteServico cliSer = new ClienteServico(cliente.getId(), idServ, dataIni, "", vSemestral, valor, true, (byte)6);
            new ClienteServicoDAO().insert(cliSer);   
        }
        else if(opt == 3){
            ClienteServico cliSer = new ClienteServico(cliente.getId(), idServ, dataIni, "", vAnual, valor, true, (byte)12);
            new ClienteServicoDAO().insert(cliSer);   
        }
        
        
        //Preencher tabela
        ClienteServicoDAO csDao = new ClienteServicoDAO();
        this.clienteServicos = (ArrayList)csDao.consultar(this.cliente.getId());
        this.servicosDoCliente = filtrarServicosCliente();
        preencherTabelaClienteServico();
    }//GEN-LAST:event_jbAddServicoActionPerformed
    //String ab = inputBox(this, "Data", "titulooo", "##/##/####");
    public String inputBox(Component caller, String mens, String title, String mask){  
        InputMask imask = new InputMask(null, mens, title, mask);  
        return imask.getResponse();  
    }
    
    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        int linhaSelecionada = jTable1.getSelectedRow();
        if(linhaSelecionada >= 0){
            int idServico = getIdServicoLinhaTabela(linhaSelecionada);

            ClienteServico cs = null;
            for(int i = 0; i < clienteServicos.size(); i++){
                if(clienteServicos.get(i).getIdCliente() == cliente.getId() && clienteServicos.get(i).getIdServico() == idServico){
                    cs = clienteServicos.get(i);
                }
            }
            
            if(cs != null){
                cs.setValor(Float.parseFloat(jtfValor.getText()));
                if(jcbFinalizado.isSelected()){
                    String dataFim = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
                    dataFim = JOptionPane.showInputDialog(this, "Data Final: ", dataFim);
                    if(dataFim != null){
                        cs.setDataFim(dataFim);
                        cs.setAtivo(false);
                    }
                }
                new ClienteServicoDAO().update(cs);
                
                this.clienteServicos = (ArrayList)new ClienteServicoDAO().consultar(this.cliente.getId());
                preencherTabelaClienteServico();
                limpaCampos();
            }

        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void controlarPeriodoFaturamento(){
//        if(jrbFaturarMensal.isSelected()){
//            jtfPeriocidade.setText("30");
//        }else if(jrbFaturarTrimestral.isSelected()){
//            jtfPeriocidade.setText("90");
//        }else if(jrbFaturarSemestral.isSelected()){
//            jtfPeriocidade.setText("180");
//        }else if(jrbFaturarAnual.isSelected()){
//            jtfPeriocidade.setText("360");
//        }
    }
    
    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        int linhaSelecionada = jTable1.getSelectedRow();
        if(linhaSelecionada >= 0){
            if(JOptionPane.showConfirmDialog(this, "Realmente deseja excluir?") == 0){
                int idServico = getIdServicoLinhaTabela(linhaSelecionada);

                ClienteServico cs = null;
                for(int i = 0; i < clienteServicos.size(); i++){
                    if(clienteServicos.get(i).getIdCliente() == cliente.getId() && clienteServicos.get(i).getIdServico() == idServico){
                        cs = clienteServicos.get(i);
                    }
                }
                if(cs != null){
                    new ClienteServicoDAO().delete(cs.getId());
                    
                    this.clienteServicos = (ArrayList)new ClienteServicoDAO().consultar(this.cliente.getId());
                    preencherTabelaClienteServico();
                    limpaCampos();
                }
            }
        }
    }//GEN-LAST:event_jbExcluirActionPerformed

    
    public int getIdServicoLinhaTabela(int linha){
        if(linha < 0 || linha > jTable1.getRowCount())
            return 0;
        else{
            DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            return (int)model.getValueAt(linha, 0); // 0(zero) referente ao primeiro campo (ID) da tabela
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbAddServico;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JCheckBox jcbFinalizado;
    private javax.swing.JComboBox jcbServicos;
    private javax.swing.JTextField jtfIdCliente;
    private javax.swing.JTextField jtfIdServicoCliente;
    private javax.swing.JTextField jtfNomeCliente;
    private javax.swing.JTextField jtfValor;
    // End of variables declaration//GEN-END:variables
}

class ModeloTabela extends AbstractTableModel{
    private List<ClienteServico> dados;
    private List<Servico> servicos;
    private String[] colunas = {"ID", "Nome" , "Mensalidade" ,"Faturamento","Data Início","Data Fim","Status"};

    public ModeloTabela(List<ClienteServico> dados, List<Servico> servicos) {
        this.dados = dados;
        this.servicos = servicos;
    }
    
    @Override
    public int getRowCount() {
        return dados.size();
    }

    @Override
    public int getColumnCount() {
        return colunas.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        switch(columnIndex){
            case 0: 
                for(Servico s : servicos){
                    if(s.getId() == dados.get(rowIndex).getIdServico()){
                        return s.getId();
                    }
                }
                break;
            case 1: 
                for(Servico s : servicos){
                    if(s.getId() == dados.get(rowIndex).getIdServico()){
                        return s.getNome();
                    }
                }
                break;
            case 2: 
                return "R$ "+dados.get(rowIndex).getValor();
            case 3: 
//                return dados.get(rowIndex).getPeriodoFaturamento()+" dias.";
            case 4:
                return dados.get(rowIndex).getDataInicio();
            case 5:
                return dados.get(rowIndex).getDataFim();
            case 6:
                if(dados.get(rowIndex).isAtivo()){
                    ImageIcon icon = new ImageIcon("src\\img\\ativo.png");
                    JLabel lbl = new JLabel(icon);
                    return lbl;
                }
                
        }   
        return null;
    }
    
    
     @Override
    public Class<?> getColumnClass(int columnIndex) {
        //retorna o tipo de dado, para cada coluna
        switch (columnIndex) {
        case 0:
            return int.class;
        case 1:
            return String.class;
        case 2:
            return float.class;
        case 3:
            return String.class;
        case 4:
            return String.class;
        case 5:
            return JLabel.class;
        default:
            throw new IndexOutOfBoundsException("Coluna Inválida!!!");
        }
    }
    
    @Override
    public String getColumnName(int columnIndex) {
        return colunas[columnIndex];
    }
    
    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        ClienteServico cs = dados.get(rowIndex);
 
    }
    
     //Métodos abaixo são para manipulação de dados
 
    /**
     * retorna o valor da linha indicada
     * @param rowIndex
     * @return
     */
    public ClienteServico getValue(int rowIndex){
        return dados.get(rowIndex);
    }
 
    /**
     * retorna o indice do objeto
     * @param empregado
     * @return
     */
    public int indexOf(ClienteServico cs) {
        return dados.indexOf(cs);
    }
 
    /**
     * add um empregado á lista
     * @param empregado
     */
    public void onAdd(ClienteServico cs) {
        dados.add(cs);
        fireTableRowsInserted(indexOf(cs), indexOf(cs));
    }
 
    /**
     * add uma lista de empregados
     * @param dadosIn
     */
    public void onAddAll(List<ClienteServico> dadosIn) {
        dados.addAll(dadosIn);
        fireTableDataChanged();
    }
 
    /**
     * remove um registro da lista, através do indice
     * @param rowIndex
     */
    public void onRemove(int rowIndex) {
        dados.remove(rowIndex);
        fireTableRowsDeleted(rowIndex, rowIndex);
    }
 
    /**
     * remove um registro da lista, através do objeto
     * @param empregado
     */
    public void onRemove(ClienteServico cs) {
        int indexBefore=indexOf(cs);//pega o indice antes de apagar
        dados.remove(cs);  
        fireTableRowsDeleted(indexBefore, indexBefore);
    }
 
    /**
     * remove todos registros da lista
     */
    public void onRemoveAll() {
        dados.clear();
        fireTableDataChanged();
    }
    
    public void addRow(ClienteServico cs){
        this.dados.add(cs);
        this.fireTableDataChanged();
    }
}