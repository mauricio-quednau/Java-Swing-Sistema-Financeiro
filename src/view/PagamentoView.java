/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import DAO.ClienteDAO;
import DAO.ClienteServicoDAO;
import DAO.FormaPagamentoDAO;
import DAO.PagamentoDAO;
import DAO.ServicoDAO;
import classes.Cliente;
import classes.FormaPagamento;
import classes.OperacaoPagamento;
import classes.Pagamento;
import classes.Periodo;
import classes.Servico;
import classes.StringData;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mauricio
 */
public class PagamentoView extends javax.swing.JInternalFrame {
    JDesktopPane parent;
    private Pagamento pagto;
    private Cliente cliente;
    private Servico servico;
    private ArrayList<FormaPagamento> fps;
    
    /**
     * Creates new form VencimentoPagtoDialogView
     */
    public PagamentoView(JDesktopPane jDesktopPane, Pagamento pgto) {
        initComponents();
        this.parent = jDesktopPane;
        this.pagto = pgto;
        
        this.cliente = new ClienteDAO().consultar(pgto.getIdCliente());
        this.servico = new ServicoDAO().consultar(pgto.getIdServico());
        this.fps = (ArrayList)new FormaPagamentoDAO().list();
        
        buscarPagamentosAnteriores();
        preencherDadosClienteServico();
        preencherTabelaOperacoesPagamento();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtfServico = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfCliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtfValor = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtfVencimento = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jbAddPagamento = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Pagamento");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Incluir Pagamento");

        jLabel2.setText("Servi√ßo:");

        jtfServico.setEditable(false);

        jLabel3.setText("Cliente:");

        jtfCliente.setEditable(false);

        jLabel4.setText("Valor: R$");

        jtfValor.setEditable(false);

        jLabel5.setText("Vencimento:");

        jtfVencimento.setEditable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Forma Pagto", "Valor"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jbAddPagamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N
        jbAddPagamento.setText("Adicionar FP");
        jbAddPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddPagamentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfCliente)
                            .addComponent(jtfServico))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfValor))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfVencimento, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(52, 52, 52))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbAddPagamento)))
                        .addContainerGap(51, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfServico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jtfValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jtfVencimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAddPagamento))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAddPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddPagamentoActionPerformed
        //Questionar data inicial (oferecendo atual)
        String dataPg = new SimpleDateFormat("dd/MM/yyyy").format(new Date());
        dataPg = JOptionPane.showInputDialog(this, "Data Pagamento: ", dataPg);
        
        float valor = Float.parseFloat(JOptionPane.showInputDialog(this, "Valor: R$", this.pagto.getValorOriginal()));
        
        //Formas de pagamento
        Object[] options = new Object[this.fps.size()];
        for(int i = 0; i < this.fps.size(); i++){
            options[i] = this.fps.get(i).getDescricao();
        }
        int optFp = JOptionPane.showOptionDialog(this, "Forma de Pagamento:", "Pagamento", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, "");
        String descricaoFp = this.fps.get(optFp).getDescricao();
        
        String msgConfirmacao = "Confirmar Pagamento?";
        msgConfirmacao += "\n Data: "+dataPg;
        msgConfirmacao += "\n Valor: R$ " + valor;
        msgConfirmacao+= "\n Forma Pagto: " + descricaoFp;
        if(JOptionPane.showConfirmDialog(this, msgConfirmacao) == 0){
            OperacaoPagamento op = new OperacaoPagamento(this.pagto.getId(), valor, this.fps.get(optFp));
            this.pagto.addOperacao(op);

            PagamentoDAO pgtoDao = new PagamentoDAO();
            //pgtoDao.insert(this.pagto);//inserir qndo realizar o 1¬∫ pagamento, depois s√≥ update
            
            
//            ArrayList<Pagamento> pagtos = (ArrayList) pgtoDao.list();
//            for(Pagamento p : pagtos){
//                //comparando se o que tenho em memeoria e igual ao que retornou do banco
//                if(p.getIdClienteServico() == this.pagto.getIdClienteServico() && p.getDataVencimento().equals(this.pagto.getDataVencimento())){
//                    this.pagto.setId(p.getId());
//                    pgtoDao.
//                }else{
//                    pgtoDao.insert(this.pagto);//inserir qndo realizar o 1¬∫ pagamento, depois s√≥ update
//                }
//                
//            }
            
            //controlar valor a pagar. Oferecer nova data de vencimento somente se nao tiver mais nada para pagar
            if(getValueToPay() <= 0){//tudo pago
                Periodo vencimento = getDataProxVencimento(this.pagto.getDataVencimento());   
                this.pagto.setDataPagamento(dataPg);

                ClienteServicoDAO csDao = new ClienteServicoDAO();
                csDao.updateDataVencimento(this.pagto.getIdClienteServico(), StringData.dateToSql(vencimento.getData()));
                csDao.updateDataPeriodo(this.pagto.getIdClienteServico(), vencimento.getPeriodo());
                
                pgtoDao.insert(this.pagto);
                JOptionPane.showMessageDialog(this, "Pagamento Finalizado!");
            }else{
                JOptionPane.showMessageDialog(this, "Pagamento Ainda N√£o Finalizado!\n Continue adicionando FP's.");
            }
        }
        
        preencherTabelaOperacoesPagamento();
    }//GEN-LAST:event_jbAddPagamentoActionPerformed

    private Periodo getDataProxVencimento(String dtVencAnterior){
        dtVencAnterior = StringData.dateFromSQL(dtVencAnterior);
        int dia = Integer.parseInt(dtVencAnterior.substring(0, 2));
        int mes = Integer.parseInt(dtVencAnterior.substring(3, 5));
        int ano = Integer.parseInt(dtVencAnterior.substring(6));
        String vMensal = "";
        if(mes + 1 > 12){//mensal
            int m = (mes+1)-12; //01
            int a = ano+1;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vMensal = m < 10 ? d+"/0"+m+"/"+a : d+"/"+m+"/"+a;
        }else{
            int m = mes+1;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vMensal = m < 10 ? d+"/0"+m+"/"+ano : d+"/"+m+"/"+ano;
        }
        String vTrimestral = "";
        if(mes + 3 > 12){//trimestre
            int m  = (mes+3)-12; //01
            int a = ano+1;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vTrimestral = m < 10 ? d+"/0"+m+"/"+a : d+"/"+m+"/"+a;
        }else{
            int m = mes+3;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vTrimestral = m < 10 ? d+"/0"+m+"/"+ano : d+"/"+m+"/"+ano;
        }
        String vSemestral = "";
        if(mes + 6 > 12){//semestre
            int m = (mes+6)-12; //01
            int a = ano+1;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vSemestral = m < 10 ? d+"/0"+m+"/"+a : d+"/"+m+"/"+a;
        }else{
            int m = mes+6;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vSemestral = m < 10 ? d+"/0"+m+"/"+ano : d+"/"+m+"/"+ano;
        }
        String vAnual = "";
        if(mes + 12 > 12){//ano
            int m = (mes+12)-12; //01
            int a = ano+1;
            vAnual = m < 10 ? dia+"/0"+m+"/"+a : dia+"/"+m+"/"+a;
            String d = dia < 10 ? "0"+dia : String.valueOf(dia);
            vAnual = m < 10 ? d+"/0"+m+"/"+a : d+"/"+m+"/"+a;
        }
        
        Object[] options = {"MENSAL: [ "+vMensal+" ]", "TRIMESTRAL: [ "+vTrimestral+" ]", "SEMESTRAL: [ "+vSemestral+" ]", "ANUAL: [ "+vAnual+" ]"};
        int opt = JOptionPane.showOptionDialog(this, "Data pr√≥ximo VENCIMENTO:", "Vencimento", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, "");
        switch(opt){
            case 0:
                return new Periodo(vMensal, (byte)1);
            case 1:
                return new Periodo(vTrimestral, (byte)3);
            case 2:
                return new Periodo(vSemestral, (byte)6);
            case 3:
                return new Periodo(vAnual, (byte)12);
            default:
                return new Periodo(vMensal, (byte)1);
        }
        
    }
    
    private void preencherDadosClienteServico(){
        if(this.cliente == null || this.servico == null || this.pagto == null)
            return;
        
        jtfServico.setText(servico.getNome());
        jtfCliente.setText(cliente.getNomeRSocial());
        jtfVencimento.setText(StringData.dateFromSQL(pagto.getDataVencimento()));
        jtfValor.setText(String.valueOf(pagto.getValorOriginal()));
    }
    
    private void preencherTabelaOperacoesPagamento(){        
        DefaultTableModel modeloTb = (DefaultTableModel)jTable1.getModel();
        modeloTb.setNumRows(0);
        
        for(OperacaoPagamento op : this.pagto.getOperacoes()){
            modeloTb.addRow(new Object[]{op.getFormaPagto().getDescricao(), op.getValor()});
        }
    }
    
    private float getValueToPay(){
        float vlPago = 0;
        for(OperacaoPagamento op : this.pagto.getOperacoes()){
            vlPago += op.getValor();
        }
        return this.pagto.getValorOriginal() - vlPago;
    }
    
    
    private void buscarPagamentosAnteriores(){
        if(this.pagto == null)
            return;
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbAddPagamento;
    private javax.swing.JTextField jtfCliente;
    private javax.swing.JTextField jtfServico;
    private javax.swing.JTextField jtfValor;
    private javax.swing.JTextField jtfVencimento;
    // End of variables declaration//GEN-END:variables
}
